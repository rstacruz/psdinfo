#!/usr/bin/env node
var argv = require('yargs')
  .option('fonts', { alias: 'f', type: 'boolean' })
  .option('text', { alias: 't', type: 'boolean' })
  .option('doc', { alias: 'd', type: 'boolean' })
  .option('full', { alias: 'F', type: 'boolean' })
  .argv

var assign = require('util')._extend

if (!module.parent) {
  if (argv._.length === 0 || argv.help || argv.h) {
    console.log("Usage:")
    console.log("  psdinfo FILE.psd [--fonts] [--text] [--doc] [--full]")
    process.exit(0)
  }

  run(argv._)
}

/*
 * Returns a summary of the PSD document
 */

function getSummary (data) {
  return {
    document: {
      width: data.document.width,
      height: data.document.height
    }
  }
}

/*
 * Returns fonts in the document
 */

function getFonts (data) {
  return {
    fonts: pluckOut(data, 'text', function (text) {
      return text && text.font && text.font.name
    })
  }
}

/*
 * Returns texts found in the document
 */

function getStrings (data) {
  return {
    text: pluckOut(data, 'text', function (text) {
      return text && text.value
    })
  }
}

function pluckOut (data, parent, fn) {
  var out = {}
  walk(data, parent, function (node) {
    var result = fn(node)
    if (result) out[result] = true
  })
  return Object.keys(out).sort()
}

function walk (object, needle, fn) {
  for (var key in object) {
    if (key === needle) {
      fn(object[key])
    } else if (typeof object[key] === 'object') {
      walk(object[key], needle, fn)
    }
  }
}

function run (files) {
  if (!argv.fonts && !argv.text && !argv.doc && !argv.full) {
    console.error('options missing; see --help')
    process.exit(1)
  }

  files.forEach(function (file) {
    require('psd').open(file)
    .then(function (psd) {
      return psd.tree().export()
    })
    .then(function (data) {
      if (argv.full) return data

      var obj = {}
      if (argv.fonts) assign(obj, getFonts(data))
      if (argv.text) assign(obj, getStrings(data))
      if (argv.doc) assign(obj, getSummary(data))
      return obj
    })
    .then(function (data) {
      log(data, file)
    })
    .catch(function (err) {
      console.error(err.message)
      process.exit(1)
    })
  })
}

/*
 * Logs a block of JSON data to the console
 */

function log (data, heading) {
  var repr = ''
  if (process.stdout.isTTY) {
    if (heading) repr += '\033[32m â†’\033[30m ' + heading + '\033[0m\n\n'
    repr += '   ' + require('js-yaml').dump(data).replace(/\n/g, '\n   ')
    repr = '\n' + repr.trim()
  } else {
    repr = JSON.stringify(data, null, 2)
  }
  console.log(repr)
}

/*
 * export
 */

exports.getFonts = getFonts
exports.getStrings = getStrings
exports.getSummary = getSummary
